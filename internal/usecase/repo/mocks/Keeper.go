// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	"github.com/antoniokichaev/go-alert-me/pkg/metrics"

	mock "github.com/stretchr/testify/mock"
)

// Keeper is an autogenerated mock type for the Keeper type
type Keeper struct {
	mock.Mock
}

type Keeper_Expecter struct {
	mock *mock.Mock
}

func (_m *Keeper) EXPECT() *Keeper_Expecter {
	return &Keeper_Expecter{mock: &_m.Mock}
}

// AddCounter provides a mock function with given fields: counter
func (_m *Keeper) AddCounter(counter *metrics.Counter) (*metrics.Counter, error) {
	ret := _m.Called(counter)

	var r0 *metrics.Counter
	var r1 error
	if rf, ok := ret.Get(0).(func(*metrics.Counter) (*metrics.Counter, error)); ok {
		return rf(counter)
	}
	if rf, ok := ret.Get(0).(func(*metrics.Counter) *metrics.Counter); ok {
		r0 = rf(counter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.Counter)
		}
	}

	if rf, ok := ret.Get(1).(func(*metrics.Counter) error); ok {
		r1 = rf(counter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keeper_AddCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCounter'
type Keeper_AddCounter_Call struct {
	*mock.Call
}

// AddCounter is a helper method to define mock.On call
//   - counter *entity.Counter
func (_e *Keeper_Expecter) AddCounter(counter interface{}) *Keeper_AddCounter_Call {
	return &Keeper_AddCounter_Call{Call: _e.mock.On("AddCounter", counter)}
}

func (_c *Keeper_AddCounter_Call) Run(run func(counter *metrics.Counter)) *Keeper_AddCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metrics.Counter))
	})
	return _c
}

func (_c *Keeper_AddCounter_Call) Return(_a0 *metrics.Counter, _a1 error) *Keeper_AddCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Keeper_AddCounter_Call) RunAndReturn(run func(*metrics.Counter) (*metrics.Counter, error)) *Keeper_AddCounter_Call {
	_c.Call.Return(run)
	return _c
}

// GetCounter provides a mock function with given fields: name
func (_m *Keeper) GetCounter(name string) (*metrics.Counter, error) {
	ret := _m.Called(name)

	var r0 *metrics.Counter
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metrics.Counter, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *metrics.Counter); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.Counter)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keeper_GetCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCounter'
type Keeper_GetCounter_Call struct {
	*mock.Call
}

// GetCounter is a helper method to define mock.On call
//   - name string
func (_e *Keeper_Expecter) GetCounter(name interface{}) *Keeper_GetCounter_Call {
	return &Keeper_GetCounter_Call{Call: _e.mock.On("GetCounter", name)}
}

func (_c *Keeper_GetCounter_Call) Run(run func(name string)) *Keeper_GetCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Keeper_GetCounter_Call) Return(_a0 *metrics.Counter, _a1 error) *Keeper_GetCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Keeper_GetCounter_Call) RunAndReturn(run func(string) (*metrics.Counter, error)) *Keeper_GetCounter_Call {
	_c.Call.Return(run)
	return _c
}

// GetGauge provides a mock function with given fields: name
func (_m *Keeper) GetGauge(name string) (*metrics.Gauge, error) {
	ret := _m.Called(name)

	var r0 *metrics.Gauge
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*metrics.Gauge, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *metrics.Gauge); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.Gauge)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keeper_GetGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGauge'
type Keeper_GetGauge_Call struct {
	*mock.Call
}

// GetGauge is a helper method to define mock.On call
//   - name string
func (_e *Keeper_Expecter) GetGauge(name interface{}) *Keeper_GetGauge_Call {
	return &Keeper_GetGauge_Call{Call: _e.mock.On("GetGauge", name)}
}

func (_c *Keeper_GetGauge_Call) Run(run func(name string)) *Keeper_GetGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Keeper_GetGauge_Call) Return(_a0 *metrics.Gauge, _a1 error) *Keeper_GetGauge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Keeper_GetGauge_Call) RunAndReturn(run func(string) (*metrics.Gauge, error)) *Keeper_GetGauge_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function with given fields:
func (_m *Keeper) GetMetrics() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keeper_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type Keeper_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
func (_e *Keeper_Expecter) GetMetrics() *Keeper_GetMetrics_Call {
	return &Keeper_GetMetrics_Call{Call: _e.mock.On("GetMetrics")}
}

func (_c *Keeper_GetMetrics_Call) Run(run func()) *Keeper_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Keeper_GetMetrics_Call) Return(_a0 map[string]string, _a1 error) *Keeper_GetMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Keeper_GetMetrics_Call) RunAndReturn(run func() (map[string]string, error)) *Keeper_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// SetGauge provides a mock function with given fields: gauge
func (_m *Keeper) SetGauge(gauge *metrics.Gauge) (*metrics.Gauge, error) {
	ret := _m.Called(gauge)

	var r0 *metrics.Gauge
	var r1 error
	if rf, ok := ret.Get(0).(func(*metrics.Gauge) (*metrics.Gauge, error)); ok {
		return rf(gauge)
	}
	if rf, ok := ret.Get(0).(func(*metrics.Gauge) *metrics.Gauge); ok {
		r0 = rf(gauge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.Gauge)
		}
	}

	if rf, ok := ret.Get(1).(func(*metrics.Gauge) error); ok {
		r1 = rf(gauge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keeper_SetGauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGauge'
type Keeper_SetGauge_Call struct {
	*mock.Call
}

// SetGauge is a helper method to define mock.On call
//   - gauge *entity.Gauge
func (_e *Keeper_Expecter) SetGauge(gauge interface{}) *Keeper_SetGauge_Call {
	return &Keeper_SetGauge_Call{Call: _e.mock.On("SetGauge", gauge)}
}

func (_c *Keeper_SetGauge_Call) Run(run func(gauge *metrics.Gauge)) *Keeper_SetGauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metrics.Gauge))
	})
	return _c
}

func (_c *Keeper_SetGauge_Call) Return(_a0 *metrics.Gauge, _a1 error) *Keeper_SetGauge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Keeper_SetGauge_Call) RunAndReturn(run func(*metrics.Gauge) (*metrics.Gauge, error)) *Keeper_SetGauge_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeeper creates a new instance of Keeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeeper(t mockConstructorTestingTNewKeeper) *Keeper {
	mock := &Keeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
